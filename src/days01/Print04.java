package days01;

public class Print04 {

	public static void main(String[] args) {
		
		// printf 안에서 %와 d, f, s 사이에 숫자옵션을 넣어서 표시할 자리수를 조절합니다
		// %(이스케이프)는  플레이스홀더(placeholder)로 이는 값을 나중에 채워 넣기 위해 임시로 예약해 놓은 자리를 말합니다. 
	        // 주로 문자열 포맷팅이나 템플릿 시스템에서 사용됩니다.
                // 플레이스홀더는 일반적으로 특정 패턴 또는 표기법을 가지고 있으며,
		// 해당 패턴이나 표기법을 사용하여 값을 동적으로 삽입할 수 있습니다.
		// 일반적으로 사용되는 플레이스홀더 표기법에는 "%s", "%d", "%f" 등이 있습니다. 이는 문자열, 정수, 부동 소수점 숫자 등의 값을 나타내는 데 사용됩니다.
		
		// 정수의 자리수 조절
		// %와 d 사이에 숫자를 안쓴경우 : 표시될 데이터의 자리 수만큼 확보한 후 출력
		System.out.printf("정수%d정수\n", 123);
		// %와 d 사이에 숫자를 쓴경우 : 쓴 숫자만큼 자리 확보후 출력데이터를 출력
		// 만약 자리가 모자르다면 자동 자리 추가,자리가 남는다면 공백을 채워 출력합니다
		System.out.printf("정수%3d정수\n", 12345);
		System.out.printf("정수%10d정수\n", 12345);
		
		// 소수점 자리를 맞춰서 출력하기 위해 같은 숫자 옵션을 지정하여 사용하는게 보통입니다.
		System.out.printf("정수%10d정수\n", 15);
		System.out.printf("정수%10d정수\n", 145);
		System.out.printf("정수%10d정수\n", 12345);
		// 출력될 자리 확보 후 왼쪽 정렬
		System.out.printf("정수%-10d정수\n\n", 12345);
		
		
		// 문자의 자리수 조절
		// 정수(%d)와 사용방법이 비슷합니다
		// 숫자를 안 쓴 경우 : 출력 데이터만큼 자리 확보
		System.out.printf("문자:%s꽃이 피었습니다\n", "무궁화");
		// 수자를 썼지만 자리가 모자른 경우 ; 필요 한 만큼 자동으로 자리 추가
		System.out.printf("문자:%2s꽃이 피었습니다\n", "무궁화");
		// 숫자를 써서 자리가 남는 경우 : 공백으로 채움
		System.out.printf("문자:%10s꽃이 피었습니다\n", "무궁화");
		// 왼쪽정렬
		System.out.printf("문자:%-10s꽃이 피었습니다\n\n", "무궁화");
		
		
		// 실수의 자리수 조절
		// 조절 숫자를 안쓴경우 : 소수점 윗자리는 필요한 만큼 자리 확보, 아래자리는 6자리 확보후 남으면 0으로 채움
		System.out.printf("실수%f실수\n", 123.123);
		// 조절 숫자를 쓴경우
		// %10.2 :  총 10자리를 확보후 소수점 한자리 & 소수점 아래 2자리로 할당. 따라서 소수점 윗자리는 7자리
		//               소수점 윗자리가 남으면 공백으로 채움. 소수점 아래자리가 남으면 0으로 채움
		//               소수점 위자리가 모자르면 정부처럼 필요한 만큼 추가, 아래자리 모자르면 반올림
				           
		System.out.printf("실수%10.4f실수\n", 123.12);
		System.out.printf("실수%3.1f실수\n", 123.12);
		System.out.printf("실수%-10.2f실수\n", 123.1234);// 왼쪽 정렬
		System.out.printf("실수%.2f실수\n", 123.1234);

	}

}






